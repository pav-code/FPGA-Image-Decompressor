`ifndef DEFINE_STATE

// This defines the states
typedef enum logic [4:0] {
	S_IDLE,
	S_INTI_FSM,
	S_INTI_FSM_1,
	S_INTI_INT_U,
	S_INTI_INT_U_1,
   S_INTI_INT_V,
	S_INTI_INT_V_1,
	S_INTI_INTERPOLATION,
	S_INTI_INTERPOLATION_1,
	S_INTI_INTERPOLATION_2,
	S_INTI_INTERPOLATION_3,
	S_INTI_INTERPOLATION_4,
	S_INTI_INTERPOLATION_5,
	S_INTI_INTERPOLATION_6,
	S_CYC_CSC_INT,
	S_CYC_CSC_INT_1,
	S_CYC_CSC_INT_2,
	S_CYC_CSC_INT_3,
	S_CYC_CSC_INT_4,
	S_CYC_CSC_INT_5,
	S_CYC_CSC_INT_6,
	S_CYC_TWO_CSC_INT,
	S_CYC_TWO_CSC_INT_1,
	S_CYC_TWO_CSC_INT_2,
	S_CYC_TWO_CSC_INT_3,
	S_CYC_TWO_CSC_INT_4,
	S_CYC_TWO_CSC_INT_5,
	S_CYC_TWO_CSC_INT_6,
	
	S_ENABLE_UART_RX,
	S_WAIT_UART_RX
} top_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

`define DEFINE_STATE 1
`endif
